version: '3.9'
services:
  db:
    image: postgres
    ports:
    - "5432:5432"
    build: {
      context: /db,
      dockerfile: dockerfile
    }
    volumes:
      - dbdata:/var/lib/postgresql/data
    restart: always
    networks:
      - net
    environment:
      - POSTGRES_DB=twitter
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    container_name: db
  nginx:
    build: nginx/.
    ports:
      - "80:80"
    depends_on:
      - server1
      - server2
    links:
      - server1
      - server2
    networks:
      - net
  redis:
    image: redis
    networks:
      - net
  server1:
    image: server
    build: {
      context: /twitter-back,
      dockerfile: dockerfile
    }
    networks:
      - net
    depends_on:
      - db
    environment:
      - dbName=twitter
      - dbUser=postgres
      - dbPass=postgres
      - dbPort=5432
      - dbHost=db
      - name=server1
      - rabbitUser=myname
      - rabbitPass=321
      - TWITS_QUEUE=twits
    container_name: server1
  server2:
    image: server
    build: {
      context: /twitter-back,
      dockerfile: dockerfile
    }
    networks:
      - net
    depends_on:
      - db
    environment:
        - dbName=twitter
        - dbUser=postgres
        - dbPass=postgres
        - dbPort=5432
        - dbHost=db
        - name=server2
        - rabbitUser=myname
        - rabbitPass=321
        - TWITS_QUEUE=twits
    container_name: server2
  front:
    ports:
      - "3000:3000"
    build: {
      context: /twitter-front,
      dockerfile: dockerfile
    }
    networks:
      - net
    environment:
      - REACT_APP_WEB_BASE_URL=http://localhost:80
    container_name: front

  rmq:
    image: rabbitmq:management
    ports:
      - "15672:15672"
    networks:
      - net
    hostname: rmq
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:15672" ]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - RABBITMQ_DEFAULT_USER=myname
      - RABBITMQ_DEFAULT_PASS=321
    container_name: rmq

  loader:
    build:
      context: /loader
      dockerfile: dockerfile
    restart: on-failure
    networks:
      - net
    depends_on:
      - rmq
      - nginx
      - redis
    environment:
      - user=myname
      - pass=321
      - WEB_BASE_URL=nginx:80
      - REDIS_NAME=redis
    container_name: loader
networks:
  net:
    driver: bridge
volumes:
  dbdata: